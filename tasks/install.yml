---
- name: ZK INSTALL| Installing dependencies
  yum:
    name: "{{ zookeeper_required_libs }}"
    state: present

- name: ZK INSTALL| Ensure ZooKeeper group
  group:
    name: "{{ zookeeper_group }}"

- name: ZK INSTALL| Ensure ZooKeeper user
  user:
    name: "{{ zookeeper_user }}"
    group: "{{ zookeeper_group }}"
  ignore_errors: true

- name: ZK INSTALL| Check ZK install dir existance
  stat:
    path: "{{ zookeeper_install_path }}"
  register: zk_install_path

- name: ZK INSTALL| Check ZK etc dir existance
  stat:
    path: "{{ zookeeper_etc_dir }}"
  register: zk_etc_path

- name: ZK INSTALL| Create Zookeeper directories
  block:
    - name: ZK INSTALL| Create install path
      file:
        path: "{{ zookeeper_install_path }}"
        state: directory
        owner: "root"
        group: "root"

    - name: ZK INSTALL| Create service path
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ zookeeper_user }}"
        group: "{{ zookeeper_group }}"
      with_items:
        - "{{ zookeeper_etc_dir }}"
        - "{{ zookeeper_data_dir }}"
        - "{{ zookeeper_log_dir }}"

- name: ZK INSTALL| Check ZooKeeper version
  shell: |
    set -o pipefail && \
    echo status | nc localhost 2181
  register: zookeeper_check
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: zookeeper_check.rc == 1 or 'is not currently serving requests' in zookeeper_check.stdout
  ignore_errors: true

- name: ZK INSTALL| Untar ZooKeeper using proxy
  unarchive:
    extra_opts: ['--strip-components=1']
    src: "{{ zookeeper_url }}"
    remote_src: true
    dest: "{{ zookeeper_install_path }}"
    owner: "root"
    group: "root"
  environment:
    https_proxy: "http://{{ proxy_settings.proxy_user }}:{{ proxy_settings.proxy_user_pass }}@{{ proxy_settings.proxy_server }}:{{ proxy_settings.proxy_server_port }}"
  when:
    - use_proxy
    - not zk_install_path.stat.exists or zookeeper_force_reinstall

- name: ZK INSTALL| Untar ZooKeeper
  unarchive:
    extra_opts: ['--strip-components=1']
    src: "{{ zookeeper_url }}"
    remote_src: true
    dest: "{{ zookeeper_install_path }}"
    owner: "root"
    group: "root"
  when:
    - not use_proxy
    - not zk_install_path.stat.exists or zookeeper_force_reinstall

- name: ZK INSTALL| Fix configuration permissions
  file:
    path: "{{ zookeeper_install_path }}/conf"
    owner: "{{ zookeeper_user }}"
    group: "{{ zookeeper_group }}"
    state: directory
    recurse: true

- name: ZK INSTALL| Clean up bin dir. Get file list
  find:
    paths: "{{ zookeeper_install_path }}/bin"
    file_type: file
    patterns: "*.cmd"
  register: _zk_bin_files_to_delete

- name: ZK INSTALL| Clean up bin dir. Remove Files
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ _zk_bin_files_to_delete.files }}"


